class Pair{
    int row;
    int col;
    int timer;
    Pair(int row,int col,int timer)
    {
        this.row=row;
        this.col=col;
        this.timer=timer;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        Queue<Pair>q=new LinkedList<>();
        int vis[][]=new int[m][n];
        int fresh=0;
        int rotten=0;
        int no_orange=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==2)
                {
                    rotten+=1;
                    q.offer(new Pair(i,j,0));
                    vis[i][j]=2;
                }
                else if(grid[i][j]==1)
                fresh++;
                else if(grid[i][j]==0)
                {
                no_orange+=1;
                vis[i][j]=0;
                }
            }
        }
        if(rotten==0&&no_orange!=0&&fresh==0)
        return 0;
        if(rotten==0)
        return -1;
        int tm=0;
        int drow[]={-1,0,1,0};
        int dcol[]={0,1,0,-1};
        int count=0;
        while(!q.isEmpty())
        {
            int row=q.peek().row;
            int col=q.peek().col;
            int t=q.peek().timer;
            tm=Math.max(tm,t);
            q.remove();
            for(int i=0;i<4;i++)
            {
                int nrow=row+drow[i];
                int ncol=col+dcol[i];
                if( nrow>=0 && ncol>=0 && nrow<m && ncol<n&&vis[nrow][ncol]==0 && grid[nrow][ncol]==1 )
                {
                   q.add(new Pair(nrow,ncol,t+1));
                   vis[nrow][ncol]=2;
                   count++;

                }
            }
        }
        if(count!=fresh)
        return -1;
        return tm;
    }
}